Export the data in sqlite database to PostgreSQL or MySQL database.


Step 1: Create SQLite DB Dumpdata Backup
python manage.py dumpdata > whole.json
You can also use the modified version of the above command by including natural primary & foreign keys as follows:

python manage.py dumpdata — natural-foreign — natural-primary > whole.json
It will generate the SQLite dump data in the JSON fixture format. It is suggested that you use this alternate command only if you face any error in restoring(loaddata) data to PostgreSQL

Step 2: Generate a Postgres DB and User
Now, you have to install Postgres in your system’s operating system. Once that is in place, use the below command to log into it:

sudo su — postgres
psql
Next, generate a PostgreSQL database and create a new user. Provide the user with a password and grant it the required database permission:

create user john;create database nw_db;alter role hero with password ‘new_db@123’;grant all privileges on database new_db to john;alter database new_db owner to john;
Now, to connect SQLite to PostgreSQL you need to configure the Setttings.py tool.

Step 3: Configure Settings.py
In your system, write the following commands:

# install this package 
pip install psycopg2
settings.py
DATABASES = {
‘default’: {
‘ENGINE’: ‘django.db.backends.postgresql_psycopg2’,
‘NAME’: ‘new_db’,
‘USER’ : ‘john’,
‘PASSWORD’ : ‘new_db@123’,
‘HOST’ : ‘localhost’,
‘PORT’ : ‘5452’,
}
}
Next, delete all migration files and create a new migration file for each application. The following command will allow you to delete the old migration files:

find . -path “*/migrations/*.py” -not -name “__init__.py” -delete
find . -path “*/migrations/*.pyc” -delete
do
python manage.py makemigrations
python manage.py migrate
Also, delete the content types(mandatory steps) to avoid numerous errors as follow:

python manage.py shell
from django.contrib.contenttypes.models import ContentType
ContentType.objects.all().delete()
This step completes the task of developing an empty Postgres database. Now, you have to load data into the PostgreSQL database from fixtures.

Step 4: Import Required Fixture via Loaddata from SQLite to PostgreSQL
The final main step to connect SQLite to PostgreSQL requires you to disable every signal present in projects. This will safeguard you from getting unique prebuilt constraints. Finally, use the following command and load data to PostgreSQL database from fixtures:

python manage.py loaddata whole.json
